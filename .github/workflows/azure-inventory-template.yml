name: Azure Resource Inventory

on:
  schedule:
    # Run weekly on Monday at 8:00 AM UTC
    - cron: '0 8 * * 1'
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      subscriptionId:
        description: 'Specific subscription ID to inventory (optional)'
        required: false
      resourceGroup:
        description: 'Specific resource group to inventory (optional)'
        required: false
      reportName:
        description: 'Custom report name (optional)'
        required: false
        default: 'AzureInventory'

jobs:
  run-inventory:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install ARI and dependencies
        shell: pwsh
        run: |
          Install-Module -Name AzureResourceInventory -Force -Scope CurrentUser
          Install-Module -Name Az.Accounts -Force -Scope CurrentUser
          Install-Module -Name ImportExcel -Force -Scope CurrentUser
          Import-Module AzureResourceInventory

      - name: Run ARI
        shell: pwsh
        run: |
          $params = @{}
          
          # If subscription ID is provided
          if ("${{ github.event.inputs.subscriptionId }}" -ne "") {
            $params.Add("SubscriptionID", "${{ github.event.inputs.subscriptionId }}")
          }
          
          # If resource group is provided
          if ("${{ github.event.inputs.resourceGroup }}" -ne "") {
            $params.Add("ResourceGroup", "${{ github.event.inputs.resourceGroup }}")
          }
          
          # Set report name
          if ("${{ github.event.inputs.reportName }}" -ne "") {
            $params.Add("ReportName", "${{ github.event.inputs.reportName }}")
          } else {
            $params.Add("ReportName", "AzureInventory_$(Get-Date -Format 'yyyyMMdd')")
          }
          
          # Add any other parameters you want to use here
          # For example: 
          # $params.Add("SecurityCenter", $true)
          # $params.Add("IncludeTags", $true)
          # $params.Add("DiagramFullEnvironment", $true)
          
          # Run ARI
          Invoke-ARI @params
          
          # Create artifacts directory
          New-Item -Path "$env:GITHUB_WORKSPACE/ari-reports" -ItemType Directory -Force
          
          # Move reports to artifacts directory
          Move-Item -Path ".\*.xlsx" -Destination "$env:GITHUB_WORKSPACE/ari-reports/" -Force
          
          if (Test-Path ".\*.drawio") {
            Move-Item -Path ".\*.drawio" -Destination "$env:GITHUB_WORKSPACE/ari-reports/" -Force
          }

      - name: Upload Reports as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ARI-Reports
          path: ari-reports/
          retention-days: 90

      # Optional: Upload to Azure Storage
      # - name: Upload to Azure Storage
      #   shell: pwsh
      #   run: |
      #     $storageAccount = "yourstorageaccount"
      #     $container = "ari-reports"
      #     
      #     # Create the storage context
      #     $ctx = New-AzStorageContext -StorageAccountName $storageAccount -UseConnectedAccount
      #     
      #     # Upload files to Azure Storage
      #     Get-ChildItem -Path "$env:GITHUB_WORKSPACE/ari-reports" -File | ForEach-Object {
      #       Set-AzStorageBlobContent -File $_.FullName -Container $container -Blob $_.Name -Context $ctx -Force
      #     }

      # Optional: Send email notification
      # - name: Send Email Notification
      #   uses: dawidd6/action-send-mail@v3
      #   with:
      #     server_address: smtp.gmail.com
      #     server_port: 465
      #     username: ${{ secrets.EMAIL_USERNAME }}
      #     password: ${{ secrets.EMAIL_PASSWORD }}
      #     subject: Azure Resource Inventory Report
      #     body: Azure Resource Inventory has completed. Reports are attached.
      #     to: recipient@example.com
      #     from: Azure Inventory <sender@example.com> 